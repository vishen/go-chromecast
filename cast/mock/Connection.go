// Code generated by mockery v2.8.0. DO NOT EDIT.

package mock

import (
	cast "github.com/vishen/go-chromecast/cast"
	api "github.com/vishen/go-chromecast/cast/proto"

	mock "github.com/stretchr/testify/mock"
)

// Connection is an autogenerated mock type for the Connection type
type Connection struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Connection) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LocalAddr provides a mock function with given fields:
func (_m *Connection) LocalAddr() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MsgChan provides a mock function with given fields:
func (_m *Connection) MsgChan() chan *api.CastMessage {
	ret := _m.Called()

	var r0 chan *api.CastMessage
	if rf, ok := ret.Get(0).(func() chan *api.CastMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *api.CastMessage)
		}
	}

	return r0
}

// Send provides a mock function with given fields: requestID, payload, sourceID, destinationID, namespace
func (_m *Connection) Send(requestID int, payload cast.Payload, sourceID string, destinationID string, namespace string) error {
	ret := _m.Called(requestID, payload, sourceID, destinationID, namespace)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, cast.Payload, string, string, string) error); ok {
		r0 = rf(requestID, payload, sourceID, destinationID, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDebug provides a mock function with given fields: debug
func (_m *Connection) SetDebug(debug bool) {
	_m.Called(debug)
}

// Start provides a mock function with given fields: addr, port
func (_m *Connection) Start(addr string, port int) error {
	ret := _m.Called(addr, port)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(addr, port)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
